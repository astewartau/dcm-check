{
    "series_fields": [
        "SeriesTime", "Modality", "PatientName", "PatientID", "AcquisitionDate", "SeriesNumber",
        "StudyDescription", "SequenceName", "ProtocolName", "SeriesDescription",
        "MagneticFieldStrength", "EchoNumbers", "EchoTime", "RepetitionTime", "SliceThickness", 
        "FlipAngle", "Rows", "Columns", "ImageType", "PixelSpacing"
    ],
    "rules": [
        {
            "rule_id": "LONG_TE",
            "description": "EchoTime field is greater than 30 ms",
            "data_source": "(df['EchoTime'] > 30).any()"
        },
        {
            "rule_id": "SINGLE_ECHO_AND_LONG_TE",
            "description": "Single echo and EchoTime field is greater than 30 ms",
            "data_source": "(len(df['EchoTime'].unique()) == 1) & (df['EchoTime'].unique()[0] > 30)"
        },
        {
            "rule_id": "LESS_THAN_3_ECHOES",
            "description": "Less than 3 echoes are present",
            "data_source": "len(df['EchoTime'].unique()) < 3"
        },
        {
            "rule_id": "SINGLE_ECHO",
            "description": "Single echo",
            "data_source": "(len(df['EchoTime'].unique()) == 1)"
        },
        {
            "rule_id": "SUB_MM",
            "description": "Sub-millimeter resolution",
            "data_source": "(df['PixelSpacing'].apply(lambda x: x[0]) < 1).any() | (df['PixelSpacing'].apply(lambda x: x[1]) < 1).any() | (df['SliceThickness'] < 1).any()"
        },
        {
            "rule_id": "ANISOTROPIC",
            "description": "Anisotropic resolution",
            "data_source": "(df['PixelSpacing'].apply(lambda x: x[0]) != df['PixelSpacing'].apply(lambda x: x[1])).any() | (df['PixelSpacing'].apply(lambda x: x[0]) != df['SliceThickness']).any() | (df['PixelSpacing'].apply(lambda x: x[1]) != df['SliceThickness']).any()"
        }
    ],
    "reference_rules": [
        {
            "rule_id": "NUM_ECHOES_DOES_NOT_MATCH",
            "description": "Number of echoes does not match the number of echoes in the reference",
            "data_source": "len(df['EchoTime'].unique()) != len(ref['EchoTime'].unique())"
        },
        {
            "rule_id": "NO_CLOSE_TE",
            "description": "There is no TE in the data that is close (<2 ms) to a TE in the reference",
            "data_source": "not any([any(abs(df['EchoTime'] - te) < 2) for te in ref['EchoTime']])"
        }
    ],
    "reference_required_matches": [
        "EchoTime"
    ]
}
